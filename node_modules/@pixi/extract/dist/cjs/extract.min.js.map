{"version":3,"file":"extract.min.js","sources":["../../src/Extract.ts"],"sourcesContent":["import { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { ExtensionType, RenderTexture } from '@pixi/core';\n\nimport type { Renderer, IRendererPlugin, ExtensionMetadata } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * this interface is used to extract only  a single pixel of Render Texture or Display Object\n * if you use this Interface all fields is required\n * @deprecated\n * @example\n * test: PixelExtractOptions = { x: 15, y: 20, resolution: 4, width: 10, height: 10 }\n */\nexport interface PixelExtractOptions\n{\n    x: number,\n    y: number,\n    height: number,\n    resolution: number,\n    width: number\n}\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\n\nexport class Extract implements IRendererPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - HTML Image of the target\n     */\n    public image(target: DisplayObject | RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject | RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(target: DisplayObject | RenderTexture, frame?: Rectangle): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n\n            flipY = true;\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        let canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            const target = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n\n            target.context.scale(1, -1);\n\n            // we can't render to itself because we should be empty before render.\n            target.context.drawImage(canvasBuffer.canvas, 0, -height);\n\n            canvasBuffer.destroy();\n            canvasBuffer = target;\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle | PixelExtractOptions): Uint8Array\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     * @private\n     * @param pixels - array of pixel data\n     * @param out - output array\n     */\n    static arrayPostDivide(\n        pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n    ): void\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"],"names":["TEMP_RECT","Rectangle","Extract","renderer","this","prototype","image","target","format","quality","Image","src","base64","canvas","toDataURL","frame","resolution","renderTexture","flipY","generated","RenderTexture","generateTexture","baseTexture","bind","width","height","Math","round","canvasBuffer","CanvasRenderTarget","webglPixels","Uint8Array","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","canvasData","context","getImageData","arrayPostDivide","data","putImageData","target_1","scale","drawImage","destroy","pixels","out","i","length","alpha","min","extension","name","type","ExtensionType","RendererPlugin"],"mappings":";;;;;;;iJAOMA,EAAY,IAAIC,EAAAA,UAwCtBC,EAAA,WAaI,SAAAA,EAAYC,GAERC,KAAKD,SAAWA,EAoPxB,OAzOWD,EAAAG,UAAAC,MAAP,SAAaC,EAAuCC,EAAiBC,GAEjE,IAAMH,EAAQ,IAAII,MAIlB,OAFAJ,EAAMK,IAAMP,KAAKQ,OAAOL,EAAQC,EAAQC,GAEjCH,GAYJJ,EAAAG,UAAAO,OAAP,SAAcL,EAAuCC,EAAiBC,GAElE,OAAOL,KAAKS,OAAON,GAAQO,UAAUN,EAAQC,IAU1CP,EAAAG,UAAAQ,OAAP,SAAcN,EAAuCQ,GAEjD,IACIC,EAEAC,EAHEd,EAAWC,KAAKD,SAElBe,GAAQ,EAERC,GAAY,EAEZZ,IAEIA,aAAkBa,EAAAA,cAElBH,EAAgBV,GAIhBU,EAAgBb,KAAKD,SAASkB,gBAAgBd,GAC9CY,GAAY,IAIhBF,GAEAD,EAAaC,EAAcK,YAAYN,WACvCD,EAAQA,MAAAA,EAAAA,EAASE,EAAcF,MAC/BG,GAAQ,EACRf,EAASc,cAAcM,KAAKN,KAI5BD,EAAab,EAASa,WAEjBD,KAEDA,EAAQf,GACFwB,MAAQrB,EAASqB,MACvBT,EAAMU,OAAStB,EAASsB,QAG5BP,GAAQ,EACRf,EAASc,cAAcM,KAAK,OAGhC,IAAMC,EAAQE,KAAKC,MAAMZ,EAAMS,MAAQR,GACjCS,EAASC,KAAKC,MAAMZ,EAAMU,OAAST,GAErCY,EAAe,IAAIC,EAAkBA,mBAACL,EAAOC,EAAQ,GAEnDK,EAAc,IAAIC,WA/IR,EA+IqCP,EAAQC,GAGvDO,EAAK7B,EAAS6B,GAEpBA,EAAGC,WACCP,KAAKC,MAAMZ,EAAMmB,EAAIlB,GACrBU,KAAKC,MAAMZ,EAAMoB,EAAInB,GACrBQ,EACAC,EACAO,EAAGI,KACHJ,EAAGK,cACHP,GAIJ,IAAMQ,EAAaV,EAAaW,QAAQC,aAAa,EAAG,EAAGhB,EAAOC,GAOlE,GALAvB,EAAQuC,gBAAgBX,EAAaQ,EAAWI,MAEhDd,EAAaW,QAAQI,aAAaL,EAAY,EAAG,GAG7CpB,EACJ,CACI,IAAM0B,EAAS,IAAIf,EAAAA,mBAAmBD,EAAaJ,MAAOI,EAAaH,OAAQ,GAE/EmB,EAAOL,QAAQM,MAAM,GAAI,GAGzBD,EAAOL,QAAQO,UAAUlB,EAAaf,OAAQ,GAAIY,GAElDG,EAAamB,UACbnB,EAAegB,EASnB,OANIzB,GAEAF,EAAc8B,SAAQ,GAInBnB,EAAaf,QAWjBX,EAAAG,UAAA2C,OAAP,SAAczC,EAAwCQ,GAElD,IACIC,EACAC,EAFEd,EAAWC,KAAKD,SAGlBgB,GAAY,EAEZZ,IAEIA,aAAkBa,EAAAA,cAElBH,EAAgBV,GAIhBU,EAAgBb,KAAKD,SAASkB,gBAAgBd,GAC9CY,GAAY,IAIhBF,GAEAD,EAAaC,EAAcK,YAAYN,WACvCD,EAAQA,MAAAA,EAAAA,EAASE,EAAcF,MAC/BZ,EAASc,cAAcM,KAAKN,KAI5BD,EAAab,EAASa,WAEjBD,KAEDA,EAAQf,GACFwB,MAAQrB,EAASqB,MACvBT,EAAMU,OAAStB,EAASsB,QAG5BtB,EAASc,cAAcM,KAAK,OAGhC,IAAMC,EAAQE,KAAKC,MAAMZ,EAAMS,MAAQR,GACjCS,EAASC,KAAKC,MAAMZ,EAAMU,OAAST,GAEnCc,EAAc,IAAIC,WA/OR,EA+OqCP,EAAQC,GAGvDO,EAAK7B,EAAS6B,GAmBpB,OAjBAA,EAAGC,WACCP,KAAKC,MAAMZ,EAAMmB,EAAIlB,GACrBU,KAAKC,MAAMZ,EAAMoB,EAAInB,GACrBQ,EACAC,EACAO,EAAGI,KACHJ,EAAGK,cACHP,GAGAX,GAEAF,EAAc8B,SAAQ,GAG1B7C,EAAQuC,gBAAgBX,EAAaA,GAE9BA,GAIJ5B,EAAAG,UAAA0C,QAAP,WAEI3C,KAAKD,SAAW,MASbD,EAAAuC,gBAAP,SACIO,EAAmDC,GAGnD,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,GAAK,EACxC,CACI,IAAME,EAAQH,EAAIC,EAAI,GAAKF,EAAOE,EAAI,GAExB,IAAVE,GAEAH,EAAIC,GAAKxB,KAAKC,MAAMD,KAAK2B,IAAgB,IAAZL,EAAOE,GAAaE,EAAO,MACxDH,EAAIC,EAAI,GAAKxB,KAAKC,MAAMD,KAAK2B,IAAoB,IAAhBL,EAAOE,EAAI,GAAaE,EAAO,MAChEH,EAAIC,EAAI,GAAKxB,KAAKC,MAAMD,KAAK2B,IAAoB,IAAhBL,EAAOE,EAAI,GAAaE,EAAO,QAIhEH,EAAIC,GAAKF,EAAOE,GAChBD,EAAIC,EAAI,GAAKF,EAAOE,EAAI,GACxBD,EAAIC,EAAI,GAAKF,EAAOE,EAAI,MA5P7BhD,EAAAoD,UAA+B,CAClCC,KAAM,UACNC,KAAMC,EAAaA,cAACC,gBA8P3BxD"}